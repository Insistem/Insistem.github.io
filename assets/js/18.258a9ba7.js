(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{559:function(t,s,a){"use strict";a.r(s);var n=a(58),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"可视化分析js的内存分配与回收"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#可视化分析js的内存分配与回收"}},[t._v("#")]),t._v(" "),a("a",{attrs:{href:"https://juejin.im/post/597c5b71f265da3e3d122a3b",target:"_blank",rel:"noopener noreferrer"}},[t._v("可视化分析js的内存分配与回收"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("strong",[t._v("原始类型的数据值都是直接保存在“栈”中的，引用类型的值是存 放在“堆”中的")])]),t._v(" "),a("p",[a("strong",[t._v("原始类型的赋值会完整复制变量值，而引用类型的赋值是复制引用地址")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"为什么一定要分-堆-和-栈-两个存储空间呢"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么一定要分-堆-和-栈-两个存储空间呢"}},[t._v("#")]),t._v(" 为什么一定要分”堆“和”栈“两个存储空间呢？")]),t._v(" "),a("p",[t._v("因为 JavaScript 引擎需要用栈来维护程序执行期间上下文的状态， 如果栈空间大了话，所有的数据都存放在栈空间里面，那么会影响到上下文切换的效率，进 而又影响到整个程序的执行效率。所以"),a("strong",[t._v("通常情况下，栈空间都不会设置太大，主要用来存放一些原始类型的小数据")]),t._v("。而引用类 型的数据占用的空间都比较大，所以这一类数据会被存放到堆中，"),a("strong",[t._v("堆空间很大，能存放很多 大的数据")]),t._v("，不过缺点是分配内存和回收内存都会占用一定的时间。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ！！！ 这种理解是错误的 ！！！！")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 上述代码，JS将执行：")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1. 为变量（a） 创建唯一标识符（identifier）")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2. 在内存中分配一个地址（在运行时分配）")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3. 将值1存储在分配的地址 (a 等于内存地址 ‘0012CCWG12’)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 上述代码，JS将执行：")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1. 为变量（b） 创建唯一标识符（identifier）")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2. 将变量a的内存地址赋值给b(b 也等于内存地址 ‘0012CCWG12’)")]),t._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当 a + 1 解析为2时，JS 将在内存中分配一个新地址，将2作为其值存储，a将指向新地址")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 此时b为多少")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'mmpy'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a \na"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'mpy'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 此时b为多少")]),t._v("\n\n")])])]),a("p",[t._v("记住JS中的原始基础数据类型是不可变的")]),t._v(" "),a("p",[t._v("JS 内存模型可以理解为两个不同的区域： "),a("strong",[t._v("调用栈（call stack）")]),t._v(" 和 "),a("strong",[t._v("堆（heap）")])]),t._v(" "),a("p",[t._v("调用栈是存放原始数据类型的地方(除了函数调用之外)")]),t._v(" "),a("p",[a("strong",[t._v("堆")]),t._v("是存储引用类型的地方。跟调用栈主要的区别在于，堆可以存储无序的数据，这些数据可以动态地增长，非常适合数组和对象。")]),t._v(" "),a("p",[t._v("![image-20200709110612424](/Users/mpy/Library/Application Support/typora-user-images/image-20200709110612424.png)")]),t._v(" "),a("h3",{attrs:{id:"js-引用类型的变量声明和赋值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js-引用类型的变量声明和赋值"}},[t._v("#")]),t._v(" JS 引用类型的变量声明和赋值")]),t._v(" "),a("p",[a("code",[t._v("let name = []")])]),t._v(" "),a("p",[t._v("上述代码，在内存中的情况：")]),t._v(" "),a("ol",[a("li",[t._v("为变量创建唯一标识符（“name”）")]),t._v(" "),a("li",[t._v("在内存中分配一个地址（将在运行时分配）")]),t._v(" "),a("li",[t._v("存储在堆上分配的内存地址的值（将在运行时分配）")]),t._v(" "),a("li",[t._v("堆上的内存地址存储分配的值（空数组[]）")])]),t._v(" "),a("h3",{attrs:{id:"let-vs-const"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#let-vs-const"}},[t._v("#")]),t._v(" let "),a("strong",[t._v("vs")]),t._v(" const")]),t._v(" "),a("p",[t._v("只有当某个变量将来发生"),a("strong",[t._v("改变")]),t._v("时才使用let")]),t._v(" "),a("p",[t._v("这里的 "),a("strong",[t._v("改变")]),t._v("指的是更改内存地址。let允许你更改内存地址，const不允许更改内存地址")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\nsum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" numbers "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nnumbers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nnumbers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nnumbers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nnumbers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nnumbers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里使用let错误地声明了数组 numbers ，因为他将把东西推入数组理解为改变数组的值。实际上这里只是改变数组的值，并没有改变numbers标识符的内存地址指向，完全可以使用const")]),t._v("\n")])])]),a("h2",{attrs:{id:"js是弱类型、动态语言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js是弱类型、动态语言"}},[t._v("#")]),t._v(" JS是弱类型、动态语言")]),t._v(" "),a("p",[t._v("弱类型： 隐式转化")]),t._v(" "),a("p",[t._v("动态：声明时可以不指定数据类型")]),t._v(" "),a("h2",{attrs:{id:"js的数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js的数据类型"}},[t._v("#")]),t._v(" JS的数据类型")]),t._v(" "),a("p",[t._v("![image-20200711150608459](/Users/mpy/Library/Application Support/typora-user-images/image-20200711150608459.png)")]),t._v(" "),a("h3",{attrs:{id:"内存泄露"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内存泄露"}},[t._v("#")]),t._v(" 内存泄露")]),t._v(" "),a("p",[t._v("函数执行完了，却还有变量没有被回收")]),t._v(" "),a("h4",{attrs:{id:"项目中遇到的内存泄露有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#项目中遇到的内存泄露有哪些"}},[t._v("#")]),t._v(" 项目中遇到的内存泄露有哪些？")]),t._v(" "),a("h3",{attrs:{id:"垃圾回收机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收机制"}},[t._v("#")]),t._v(" 垃圾回收机制")]),t._v(" "),a("h4",{attrs:{id:"调用栈中的数据回收"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#调用栈中的数据回收"}},[t._v("#")]),t._v(" 调用栈中的数据回收")]),t._v(" "),a("p",[t._v("通过"),a("strong",[t._v("记录当前执行状态的指针")]),t._v("ESP，当一个函数执行结束之后，"),a("strong",[t._v("JavaScript 引擎会通过向下移动 ESP 来销毁该函数保 存在栈中的执行上下文")])]),t._v(" "),a("h4",{attrs:{id:"堆中的数据是如何回收的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#堆中的数据是如何回收的"}},[t._v("#")]),t._v(" "),a("strong",[t._v("堆中的数据是如何回收的")])]),t._v(" "),a("p",[t._v("新生代：福回收期   "),a("strong",[t._v("Scavenge 算法")]),t._v("  复制  对象晋升策略   对象区域  空闲区域")]),t._v(" "),a("p",[t._v("老生代：住回收器 标记-清除")])])}),[],!1,null,null,null);s.default=r.exports}}]);