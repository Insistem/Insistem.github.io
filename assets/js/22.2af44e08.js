(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{490:function(t,s,a){"use strict";a.r(s);var n=a(58),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"事件循环-event-loop"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件循环-event-loop"}},[t._v("#")]),t._v(" 事件循环 - event loop")]),t._v(" "),a("h2",{attrs:{id:"问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#问题"}},[t._v("#")]),t._v(" 问题：")]),t._v(" "),a("ul",[a("li",[t._v("是不是多个微任务会在同一个宏任务中执行，这是JS引擎设定的？")])]),t._v(" "),a("h2",{attrs:{id:"大纲"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#大纲"}},[t._v("#")]),t._v(" 大纲")]),t._v(" "),a("ul",[a("li",[t._v("常见执行顺序问题 -")]),t._v(" "),a("li",[t._v("https://juejin.im/post/5a72df6cf265da3e2c3870b9")]),t._v(" "),a("li",[t._v("js运行机制 - 单线程 - 为啥是单线程")]),t._v(" "),a("li",[t._v("js的事件循环是怎么回事 -\n"),a("ul",[a("li",[t._v("https://blog.csdn.net/Fundebug/article/details/86487117")]),t._v(" "),a("li",[t._v("https://juejin.im/post/5e5c7f6c518825491b11ce93")]),t._v(" "),a("li",[t._v("https://juejin.im/post/59e85eebf265da430d571f89")])])]),t._v(" "),a("li",[t._v("node中也是js为啥会跟浏览器中的不一样\n"),a("ul",[a("li",[t._v("https://mp.weixin.qq.com/s/RNYYNR7A01V-Y2aC1wNsGw")]),t._v(" "),a("li",[t._v("https://blog.fundebug.com/2019/01/15/diffrences-of-browser-and-node-in-event-loop/")])])]),t._v(" "),a("li",[t._v("微任务 - 宏任务\n"),a("ul",[a("li",[t._v("Macro task: setTimeout、MessageChannel、postMessage、setImmediate")]),t._v(" "),a("li",[t._v("Micro Task:MutationObsever 和 Promise.then")]),t._v(" "),a("li",[t._v("执行优先级上，主线程任务 > microtask > macrotask")])])]),t._v(" "),a("li",[t._v("promise 前身 jQuary中的deffered")]),t._v(" "),a("li",[t._v("Vue中的事件循环 nextTick是怎么回事 , 与node中的nextTick是否一样 - https://segmentfault.com/a/1190000008589736")]),t._v(" "),a("li",[t._v("常见面试题 - setTimeout / promise / await async 执行顺序")]),t._v(" "),a("li",[t._v("如何实现js中的多线程 - webworker")]),t._v(" "),a("li",[t._v("[可以查看事件循环的网站](http://latentflip.com/loupe/?code=JC5vbignYnV0dG9uJywgJ2NsaWNrJywgZnVuY3Rpb24gb25DbGljaygpIHsKICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gdGltZXIoKSB7CiAgICAgICAgY29uc29sZS5sb2coJ1lvdSBjbGlja2VkIHRoZSBidXR0b24hJyk7ICAgIAogICAgfSwgMjAwMCk7Cn0pOwoKY29uc29sZS5sb2coIkhpISIpOwoKc2V0VGltZW91dChmdW5jdGlvbiB0aW1lb3V0KCkgewogICAgY29uc29sZS5sb2coIkNsaWNrIHRoZSBidXR0b24hIik7Cn0sIDUwMDApOwoKY29uc29sZS5sb2coIldlbGNvbWUgdG8gbG91cGUuIik7!!!PGJ1dHRvbj5DbGljayBtZSE8L2J1dHRvbj4%3D 、 https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/)")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/?utm_source=html5weekly",target:"_blank",rel:"noopener noreferrer"}},[t._v("查看调用栈"),a("OutboundLink")],1)])]),t._v(" "),a("h1",{attrs:{id:"解释"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解释"}},[t._v("#")]),t._v(" 解释")]),t._v(" "),a("p",[t._v("被称作事件循环的原因在于，同步的任务可能会生成新的任务，因此它一直在不停的查找新的事件并执行。一次循环的执行称之为 tick，在这个循环里执行的代码被称作 task，而整个过程是不断重复的。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("上面代码在输出 "),a("strong",[t._v("1")]),t._v(" 之后(谨慎使用！我的浏览器就被卡死了~)，定时器被塞到任务队列里，然后主线程继续往下执行，碰到一个死循环，导致任务队列里的任务永远不会被执行，因此不会输出 "),a("strong",[t._v("2")])]),t._v(" "),a("p",[t._v("1 4 7 2 3 5 6")]),t._v(" "),a("p",[t._v("调用栈的理解  - 结合try-catch的捕捉机制")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("demo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'demo'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("demo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 打印顺序")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" demo "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("栈中的代码会调用各种外部API，它们在任务队列中加入各种事件(onClick,onLoad,onDone)，只要栈中的代码执行完毕(js引擎存在monitoring process进程，会持续不断的检查主线程执行栈是否为空)，主线程就回去读取任务队列，在按顺序执行这些事件对应的回调函数。")]),t._v(" "),a("p",[t._v("也就是说主线程从任务队列中读取事件，这个过程是循环不断的，所以这种运行机制又成为Event Loop(事件循环)。")]),t._v(" "),a("p",[t._v("宏任务包括： script（整体代码），I/O，setTimeout, setInterval, requestAnimationFrame(web), setImmediate(node)")]),t._v(" "),a("p",[t._v("微任务包括： Promise, MutationObserver, process.nextTick(node, "),a("strong",[t._v("这里注意node中的这个任务一定是在这轮宏任务执行结束，执行微任务队列任务之前执行，即使写在promise后面")]),t._v(")")])]),t._v(" "),a("p",[t._v("![image-20200709172012452](/Users/mpy/Library/Application Support/typora-user-images/image-20200709172012452.png)")]),t._v(" "),a("h3",{attrs:{id:"预备知识"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#预备知识"}},[t._v("#")]),t._v(" 预备知识")]),t._v(" "),a("p",[t._v("1、 为啥说JS是单线程语言？")]),t._v(" "),a("p",[t._v("2、 因为JS是单线程语言，意味着所有任务都需要排队，前一个任务结束，才会执行后一个任务。如果前一个任务耗时很长，后一个任务就不得不一直等着")]),t._v(" "),a("p",[t._v("3、 所有任务可以分为两种，一种为同步任务，另一种为异步任务。"),a("strong",[t._v("同步任务")]),t._v("指的是，在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；"),a("strong",[t._v("异步任务")]),t._v('指的是，不进入主线程，而进入"任务队列"的任务，。')]),t._v(" "),a("p",[t._v("4、 异步执行的运行机制：：")]),t._v(" "),a("h5",{attrs:{id:"事件循环"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件循环"}},[t._v("#")]),t._v(" 事件循环")]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"/Users/mpy/Library/Application Support/typora-user-images/image-20200709175854321.png",alt:"image-20200709175854321"}}),t._v(" "),a("h2",{attrs:{id:"事件循环和消息队列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件循环和消息队列"}},[t._v("#")]),t._v(" 事件循环和消息队列")]),t._v(" "),a("h4",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),a("p",[t._v("每个渲染进程都有一个主线程，并且主线程非常繁忙，要处理的任务有 处理DOM、计算样式、处理布局、处理JS任务、各种输入事件。要让这 么多不同类型的任务在主线程中有条不紊地执行，这就需要一个系统来统筹调度这些任务， 这个统筹调度系统就是我们今天要讲的消息队列和事件循环系统。")]),t._v(" "),a("h4",{attrs:{id:"事件循环-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件循环-2"}},[t._v("#")]),t._v(" 事件循环")]),t._v(" "),a("p",[t._v("为了协调这些任务有条不紊地在主线程上执行，页面进程引入了消息队列和事件循环机制，渲染进程内部会维护多个消息队列，比如延迟执行队列和普通的消息队列。然后主线程采用 一个 for 循环，不断地从这些任务队列中取出任务并执行任务。")]),t._v(" "),a("h4",{attrs:{id:"消息队列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#消息队列"}},[t._v("#")]),t._v(" 消息队列")]),t._v(" "),a("p",[a("strong",[t._v("消息队列是一种数据结构，可以存放要执行的任务")]),t._v("。它符合队列“"),a("strong",[t._v("先进先 出")]),t._v("”的特点，也就是说"),a("strong",[t._v("要添加任务的话，添加到队列的尾部;要取出任务的话，从队列头部 去取")]),t._v("。")]),t._v(" "),a("p",[t._v("消息队列中的任务类型： 输入事件(鼠标滚动、点击、移动)、微任务、文件读写、WebSocket、JavaScript 定时器，还包含了很多与页面相关的事件，如 JavaScript 执行、解析 DOM、样式计算、布局计算、CSS 动画等")]),t._v(" "),a("h4",{attrs:{id:"如何解决单个任务执行时长过久的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何解决单个任务执行时长过久的问题"}},[t._v("#")]),t._v(" 如何解决单个任务执行时长过久的问题")]),t._v(" "),a("p",[t._v("因为所有的任务都是在单线程中执行的，所以每次只能执行一个任务，而其他任务就都处于等待状态。如果其中一个任务执行时间过久，那么下一个任务就要等待很长时间。JS通过回调功能来规避这种问题，也就是让要执行的耗时长的 JavaScript 任务滞后执行")]),t._v(" "),a("h4",{attrs:{id:"整个过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#整个过程"}},[t._v("#")]),t._v(" 整个过程")]),t._v(" "),a("p",[t._v("渲染进程中所有运行在主线程上的任务都需要先添加到消息队列，然后事件循环系统再按照顺序执行消息队列中的任务。")]),t._v(" "),a("p",[t._v("其他进程想要发送任务给页面主线程，那么先通过 IPC 把任务发送给渲染进程的 IO 线程，IO 线程再把任务发送给页面主线程（IO线程，用来负责和其它进程IPC通信的）")]),t._v(" "),a("h4",{attrs:{id:"通过settimeout看延迟任务是怎么执行的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#通过settimeout看延迟任务是怎么执行的"}},[t._v("#")]),t._v(" 通过setTimeout看延迟任务是怎么执行的")]),t._v(" "),a("p",[t._v("处理完消息队列中 的一个任务之后，就开始执行 ProcessDelayTask 函数。该函数会根据发 起时间和延迟时间计算出到期的任务，然后依次执行这些到期的任务。等到期的任务执行完 成之后，再继续下一个循环过程 通过定时器发起的任务就被保存到延迟队列")]),t._v(" "),a("p",[t._v("raf VS setTimeout : requestAnimationFrame与浏览器刷新同步，适合做动画，而setTimeout就算设置了16.7延迟，也可 能会因为当前任务的执行时间过长而延迟")]),t._v(" "),a("h4",{attrs:{id:"通过xmlhttprequest理解回调"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#通过xmlhttprequest理解回调"}},[t._v("#")]),t._v(" 通过XMLHttpRequest理解回调")]),t._v(" "),a("h6",{attrs:{id:"回调函数-将一个函数作为参数传递给另外一个函数-那作为参数的这个函数就是回调函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#回调函数-将一个函数作为参数传递给另外一个函数-那作为参数的这个函数就是回调函数"}},[t._v("#")]),t._v(" 回调函数 - 将一个函数作为参数传递给另外一个函数，那作为参数的这个函数就是"),a("strong",[t._v("回调函数")])]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("同步回调")]),t._v("： 回调函数 callback 是在主函数 doWork 返回之前执行的")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("callback")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'i am do homework'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("doWork")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("cb")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'start do work'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cb")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v(" console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'end do work'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("doWork")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("callback"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("异步回调：回调函数在主函数外部执行的过程")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("callback")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'i am do homework'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("doWork")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("cb")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'start do work'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v(" console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'end do work'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("doWork")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("callback"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("当循环系统在执行一个任务的时候，都要为这个任务维护一个 "),a("strong",[t._v("系统调用栈")]),t._v("。这个"),a("strong",[t._v("系统调用栈")]),t._v("类似于 JavaScript 的调用栈，只不过系统调用栈是 Chromium 的开发语言 C++ 来维护的.")]),t._v(" "),a("p",[t._v("![image-20200711175137167](/Users/mpy/Library/Application Support/typora-user-images/image-20200711175137167.png)")]),t._v(" "),a("p",[t._v("这幅图记录了一个 Parse HTML 的任务执行过程，其中黄色的条目表示执行 JavaScript 的 过程，其他颜色的条目表示浏览器内部系统的执行过程。")]),t._v(" "),a("p",[t._v("Parse HTML 任务在执行过程中会遇到一系列的子过程，比如在 解析页面的过程中遇到了 JavaScript 脚本，那么就暂停解析过程去执行该脚本，等执行完 成之后，再恢复解析过程。然后又遇到了样式表，这时候又开始解析样式表......直到整个任 务执行完成。")]),t._v(" "),a("p",[t._v("需要说明的是，整个 Parse HTML 是一个完整的任务，在执行过程中的脚本解析、样式表 解析都是该任务的子过程，其下拉的长条就是执行过程中调用栈的信息。")]),t._v(" "),a("p",[a("strong",[t._v("XMLHttpRequest")]),t._v(" "),a("strong",[t._v("运作机制")])]),t._v(" "),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"/Users/mpy/Library/Application Support/typora-user-images/image-20200711175002528.png",alt:"image-20200711175002528"}}),t._v(" "),a("h4",{attrs:{id:"如何处理高优先级的任务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何处理高优先级的任务"}},[t._v("#")]),t._v(" 如何处理高优先级的任务")]),t._v(" "),a("p",[t._v("所有任务来自消息队列，如果想要执行一个任务，必须添加到消息队列的尾部，如果前面有很多任务排队了，势必会影响实时性；采用同步通知的方式，又会影响当前任务的执行效率。那么如何权衡"),a("strong",[t._v("效率")]),t._v("和"),a("strong",[t._v("实时性")]),t._v("呢？")]),t._v(" "),a("h4",{attrs:{id:"宏任务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#宏任务"}},[t._v("#")]),t._v(" 宏任务")]),t._v(" "),a("p",[t._v("渲染事件(如解析 DOM、计算布局、绘制); 用户交互事件(如鼠标点击、滚动页面、放大缩小等); JavaScript 脚本执行事件; 网络请求完成、文件读写完成事件。我们把这些消息队列中的任 务称为"),a("strong",[t._v("宏任务")])]),t._v(" "),a("p",[t._v("宏任务可以满足我们大部分的日常需求，不过如果有对时间精度要求较高的需求，宏任务就难以胜任了。页面的渲染事件、各种 IO 的完成事件、执行 JavaScript 脚本的事件、用 户交互的事件等都随时有可能被添加到消息队列中，而且添加事件是由系统操作的， JavaScript 代码不能准确掌控任务要添加到队列中的位置，控制不了任务在消息队列中的 位置，所以很难控制开始执行任务的时间")]),t._v(" "),a("h4",{attrs:{id:"微任务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#微任务"}},[t._v("#")]),t._v(" 微任务")]),t._v(" "),a("p",[t._v("有哪些微任务 - MutationObserver、Promise")]),t._v(" "),a("p",[t._v("通常我们把消息队列中的任务称为"),a("strong",[t._v("宏任务")]),t._v("，每个宏任务中都关联了一个"),a("strong",[t._v("微任务队列")]),t._v("，在执行 宏任务的过程中，如果 DOM 有变化，那么就会将该变化添加到微任务列表中，这样就不 会影响到宏任务的继续执行，因此也就解决了执行效率的问题。")]),t._v(" "),a("p",[t._v("等宏任务中的主要功能都直接完成之后，这时候，渲染引擎并不着急去执行下一个宏任务， 而是执行当前宏任务中的微任务，因为 DOM 变化的事件都保存在这些微任务队列中，这 样也就解决了实时性问题。")]),t._v(" "),a("p",[t._v("微任务就是一个需要异步执行的函数，执行时机是在主函数执行结束之后、当前宏任务结束之前。")]),t._v(" "),a("h4",{attrs:{id:"微任务产生的时机和执行微任务队列的时机"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#微任务产生的时机和执行微任务队列的时机"}},[t._v("#")]),t._v(" 微任务产生的时机和执行微任务队列的时机")]),t._v(" "),a("p",[t._v("第一种方式是使用 MutationObserver 监控某个 DOM 节点，然后再通过 JavaScript 来修 改这个节点，或者为这个节点添加、删除部分子节点，当 DOM 节点发生变化时，就会产 生 DOM 变化记录的微任务。")]),t._v(" "),a("p",[t._v("第二种方式是使用 Promise，当调用 Promise.resolve() 或者 Promise.reject() 的时候，也 会产生微任务。")]),t._v(" "),a("p",[t._v("通过 DOM 节点变化产生的微任务或者使用 Promise 产生的微任务都会被 JavaScript 引擎 按照顺序保存到微任务队列中。")]),t._v(" "),a("h4",{attrs:{id:"异步回调有两种方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异步回调有两种方式"}},[t._v("#")]),t._v(" 异步回调有两种方式")]),t._v(" "),a("h6",{attrs:{id:"_1-异步回调函数封装成一个宏任务-添加到消息队列尾部-当循环系统执行到该任-务的时候执行回调函数-。-settimeout-和-xmlhttprequest-的回调函数都是通过这种方式来实现的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-异步回调函数封装成一个宏任务-添加到消息队列尾部-当循环系统执行到该任-务的时候执行回调函数-。-settimeout-和-xmlhttprequest-的回调函数都是通过这种方式来实现的"}},[t._v("#")]),t._v(" 1. "),a("strong",[t._v("异步回调函数封装成一个宏任务，添加到消息队列尾部，当循环系统执行到该任 务的时候执行回调函数")]),t._v(" 。  setTimeout 和 XMLHttpRequest 的回调函数都是通过这种方式来实现的")]),t._v(" "),a("h6",{attrs:{id:"_2-执行时机是在主函数执行结束之后、当前宏任务结束之前执行回调函数-这通"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-执行时机是在主函数执行结束之后、当前宏任务结束之前执行回调函数-这通"}},[t._v("#")]),t._v(" 2. 执行时机是在主函数执行结束之后、当前宏任务结束之前执行回调函数，这通")]),t._v(" "),a("p",[t._v("常都是以微任务形式体现的")]),t._v(" "),a("h4",{attrs:{id:"事件循环-宏任务-微任务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件循环-宏任务-微任务"}},[t._v("#")]),t._v(" 事件循环+宏任务/微任务")]),t._v(" "),a("p",[t._v("在执行一个 ParseHTML 的宏任务，在执行过程中，遇到了 JavaScript 脚本， 那么就暂停解析流程，进入到 JavaScript 的执行环境。从图中可以看到，全局上下文中包 含了微任务列表。")]),t._v(" "),a("p",[t._v("在 JavaScript 脚本的后续执行过程中，分别通过 Promise 和 removeChild 创建了两个微 任务，并被添加到微任务列表中。接着 JavaScript 执行结束，准备退出全局执行上下文， 这时候就到了检查点了，JavaScript 引擎会检查微任务列表，发现微任务列表中有微任 务，那么接下来，依次执行这两个微任务。等微任务队列清空之后，就退出全局执行上下文。")]),t._v(" "),a("p",[t._v("微任务和宏任务是绑定的，每个宏任务在执行时，会创建自己的微任务队列。")]),t._v(" "),a("p",[t._v("综上所述， MutationObserver 采用了“"),a("strong",[t._v("异步 + 微任务")]),t._v("”的策略。")]),t._v(" "),a("p",[t._v("通过"),a("strong",[t._v("异步")]),t._v("操作解决了同步操作的"),a("strong",[t._v("性能问题")]),t._v("; 通过"),a("strong",[t._v("微任务")]),t._v("解决了"),a("strong",[t._v("实时性的问题")]),t._v("。")]),t._v(" "),a("h6",{attrs:{id:"为什么是全局上下文中存储的微任务队列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么是全局上下文中存储的微任务队列"}},[t._v("#")]),t._v(" 为什么是全局上下文中存储的微任务队列？？")]),t._v(" "),a("p",[t._v("微任务队列跟JS是绑定在一起的？？只有在执行JS过程中才会产生微任务？")]),t._v(" "),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"/Users/mpy/Library/Application Support/typora-user-images/image-20200711221517833.png",alt:"image-20200711221517833"}}),t._v(" "),a("p",[t._v("![image-20200711221539227](/Users/mpy/Library/Application Support/typora-user-images/image-20200711221539227.png)")]),t._v(" "),a("p",[t._v("1 rand")])])}),[],!1,null,null,null);s.default=e.exports}}]);