(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{489:function(t,s,a){"use strict";a.r(s);var n=a(58),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h3",{attrs:{id:"bff应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bff应用"}},[t._v("#")]),t._v(" "),a("strong",[t._v("BFF")]),t._v("应用")]),t._v(" "),a("p",[t._v("参考：https://www.jianshu.com/p/eb1875c62ad3 Backend for Frontent")]),t._v(" "),a("img",{staticStyle:{zoom:"30%"},attrs:{src:"/Users/mpy/Library/Application Support/typora-user-images/image-20200512224622827.png",alt:"image-20200512224622827"}}),t._v(" "),a("ul",[a("li",[t._v("为什么ssr 更利于 SEO？")])]),t._v(" "),a("h2",{attrs:{id:"commonjs的理解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#commonjs的理解"}},[t._v("#")]),t._v(" commonjs的理解")]),t._v(" "),a("p",[t._v("借此理解下 module.exports 与 exports 有什么区别")]),t._v(" "),a("p",[t._v("可以借助运行shell命令"),a("code",[t._v("webpack --devtool none --mode development --target node index.js")]),t._v("，webpack打包出的文件来看，为什么是这样的")]),t._v(" "),a("h2",{attrs:{id:"npm-包管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#npm-包管理"}},[t._v("#")]),t._v(" npm 包管理")]),t._v(" "),a("ul",[a("li",[t._v("什么是包\n"),a("ul",[a("li",[t._v("别人写的nodejs模块")])])]),t._v(" "),a("li",[t._v("常用的命令\n"),a("ul",[a("li",[t._v("npm init")]),t._v(" "),a("li",[t._v("npm install")]),t._v(" "),a("li",[t._v("npm uninstall 删除某个包")]),t._v(" "),a("li",[t._v("npm config set registry https://registry.npm.taobao.org")]),t._v(" "),a("li",[t._v("npm config get registry")])])])]),t._v(" "),a("h3",{attrs:{id:"模块介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模块介绍"}},[t._v("#")]),t._v(" 模块介绍")]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"/Users/mpy/Library/Application Support/typora-user-images/image-20200507000925267.png",alt:"image-20200507000925267"}}),t._v(" "),a("h4",{attrs:{id:"内置模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内置模块"}},[t._v("#")]),t._v(" 内置模块")]),t._v(" "),a("p",[t._v("EventEmitter")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("观察者模式")]),t._v(" "),a("ul",[a("li",[t._v("调用 vs 抛事件\n"),a("ul",[a("li",[t._v("关键在于”不知道被通知者存在“")]),t._v(" "),a("li",[t._v("以及”没有人听还能继续下去“")])])])])])]),t._v(" "),a("h4",{attrs:{id:"异步"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异步"}},[t._v("#")]),t._v(" 异步")]),t._v(" "),a("h5",{attrs:{id:"_13-异步-node-js的非阻塞i-o"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13-异步-node-js的非阻塞i-o"}},[t._v("#")]),t._v(" 13|异步： Node.js的非阻塞I/O")]),t._v(" "),a("ul",[a("li",[t._v("阻塞与非阻塞的区别在于系统接受输入再到输出期间，能不能接收其他输入")]),t._v(" "),a("li",[t._v("生活中的例子类比：\n"),a("ul",[a("li",[t._v("系统=食堂阿姨/服务生，输入=点菜，输出=端菜")]),t._v(" "),a("li",[t._v("在你点菜到拿到菜这个过程中:")]),t._v(" "),a("li",[t._v("饭堂阿姨只能一分一分的给你打菜 -> 阻塞I/O")]),t._v(" "),a("li",[t._v("服务生给你点完菜之后还可以服务其他客人 -> 非阻塞I/O")])])]),t._v(" "),a("li",[t._v("理解非阻塞I/O的要点在于\n"),a("ul",[a("li",[a("em",[t._v("确定一个进行Input/Output的系统")])]),t._v(" "),a("li",[t._v("思考在I/O过程中，能不能进行其他I/O")])])]),t._v(" "),a("li",[t._v("代码演示 - glob（Train-myself/kaikeba/nodejs/gekee-node/4.nonblocking）")])]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"/Users/mpy/Library/Application Support/typora-user-images/image-20200507214611166.png",alt:"image-20200507214611166"}}),t._v(" "),a("h4",{attrs:{id:"_14-异步-异步编程之callback"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_14-异步-异步编程之callback"}},[t._v("#")]),t._v(" 14|异步：异步编程之callback")]),t._v(" "),a("ul",[a("li",[t._v("回调函数格式规范\n"),a("ul",[a("li",[t._v("Error-first callback")]),t._v(" "),a("li",[t._v("Node-style callback")]),t._v(" "),a("li",[t._v("第一个参数是error，后面的参数才是结果")])])]),t._v(" "),a("li",[t._v("异步编程容易出现的问题\n"),a("ul",[a("li",[t._v("回调地狱")]),t._v(" "),a("li",[t._v("异步的并发")])])]),t._v(" "),a("li",[t._v("历史的解决方案：\n"),a("ul",[a("li",[t._v("node中的async.js")]),t._v(" "),a("li",[t._v("Thunk")])])])]),t._v(" "),a("h3",{attrs:{id:"_15-异步-事件循环"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_15-异步-事件循环"}},[t._v("#")]),t._v(" 15|异步：事件循环")]),t._v(" "),a("ul",[a("li",[a("em",[t._v("try catch 的异常捕获机制")]),t._v(" ??\n"),a("ul",[a("li",[t._v("在调用栈中，上层的抛错 throw new Error，会被下层的捕获try catch")]),t._v(" "),a("li",[t._v("只能捕获同一个调用栈中的异常")]),t._v(" "),a("li",[t._v("代码演示- [（Train-myself/kaikeba/nodejs/gekee-node/5.async-callback/index.js）]")])])]),t._v(" "),a("li",[t._v("node中与浏览器的事件循环有何不同")]),t._v(" "),a("li",[t._v("调用栈与event-loop")])]),t._v(" "),a("h3",{attrs:{id:"_16-异步-异步编程之promise"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_16-异步-异步编程之promise"}},[t._v("#")]),t._v(" 16|异步：异步编程之Promise")]),t._v(" "),a("h5",{attrs:{id:"promise"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#promise"}},[t._v("#")]),t._v(" promise")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("当前事件循环得不到的结果，但未来的事件循环会给到你结果")])]),t._v(" "),a("li",[a("p",[t._v("new Promise((resolve,reject)=>{.....})  中间包裹的东西是个异步操作")])]),t._v(" "),a("li",[a("p",[t._v("是一个状态机")]),t._v(" "),a("ul",[a("li",[t._v("pending")]),t._v(" "),a("li",[t._v("Fulfilled/resolved")]),t._v(" "),a("li",[t._v("Rejected")]),t._v(" "),a("li",[a("img",{staticStyle:{zoom:"50%"},attrs:{src:"/Users/mpy/Library/Application Support/typora-user-images/image-20200507225623911.png",alt:"image-20200507225623911"}})])])]),t._v(" "),a("li",[a("p",[t._v(".then 和 .catch")]),t._v(" "),a("ul",[a("li",[t._v("resolve状态的Promise 会回调后面的第一个.then")]),t._v(" "),a("li",[t._v("rejected状态的promise会回调后面的第一个.catch")]),t._v(" "),a("li",[t._v("任何一个rejected状态且后面没有.catch的promise，都会造成浏览器/node环境的全局错误")])])]),t._v(" "),a("li",[a("p",[t._v("resolve() 和 rejecte()")]),t._v(" "),a("ul",[a("li",[a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" promise "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Promise")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("resolve"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("reject")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("33")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 用来扭转Promise的pending状态为resolved状态")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("reject")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("22")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 无法再扭转为rejected")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("res")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// promise状态变为resolved时会立即出发then中的回调")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("catch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("一旦状态改为resolved状态就不会被再更改为rejected")])])])]),t._v(" "),a("li",[a("p",[t._v("Promise 是如何解决异步流程控制的问题的呢")]),t._v(" "),a("ul",[a("li",[t._v("示例演示 - 在原来callback方式的interview函数基础上改成promise")]),t._v(" "),a("li",[t._v("执行then和catch会返回一个新promise，该promise最终状态根据then和catch的回调函数的执行结果决定\n"),a("ul",[a("li",[t._v("如果回调函数最终是throw，该Promise是rejected状态")]),t._v(" "),a("li",[t._v("如果回调函数最终是return，该Promise是resolved状态")]),t._v(" "),a("li",[t._v("但如果回调函数最终return了一个Promise，该Promise会和回调函数return的Promise状态保持一致")])])])])])]),t._v(" "),a("h3",{attrs:{id:"_17-异步-异步编程之async-await"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_17-异步-异步编程之async-await"}},[t._v("#")]),t._v(" 17|异步：异步编程之async-await")]),t._v(" "),a("h5",{attrs:{id:"async-await"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#async-await"}},[t._v("#")]),t._v(" async/await")]),t._v(" "),a("ul",[a("li",[t._v("Async function 是Promise的语法糖封装")]),t._v(" "),a("li",[t._v("异步编程的重疾方案 - 以同步的方式写异步\n"),a("ul",[a("li",[t._v('await关键字可以"暂停”async function 的执行')]),t._v(" "),a("li",[t._v("await 关键字可以以同步的写法获取Promise的执行结果")]),t._v(" "),a("li",[t._v("try-catch 可以获取await所得到的错误")])])])]),t._v(" "),a("h4",{attrs:{id:"小知识点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小知识点"}},[t._v("#")]),t._v(" 小知识点")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("只加了async的函数代表了什么含义")]),t._v(" "),a("ul",[a("li",[t._v("相当于"),a("code",[t._v("return new Promise(resolve=> resolve())")]),t._v("，也就是说return了一个理解resolved的promise对象")]),t._v(" "),a("li",[a("code",[t._v("async function demo(){ return 123}")]),t._v(" 相当于 "),a("code",[t._v("function demo(){ return new Promise(resolve=>resolve(123))}")])])])]),t._v(" "),a("li",[a("p",[t._v("调用栈的理解")]),t._v(" "),a("ul",[a("li",[a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("demo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'demo'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("demo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 打印顺序")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" demo "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v("\n")])])])])])])]),t._v(" "),a("h3",{attrs:{id:"_18-http-什么是http服务器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_18-http-什么是http服务器"}},[t._v("#")]),t._v(" 18|HTTP：什么是HTTP服务器？")]),t._v(" "),a("h4",{attrs:{id:"是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#是什么"}},[t._v("#")]),t._v(" 是什么")]),t._v(" "),a("ul",[a("li",[t._v("应用层协议")]),t._v(" "),a("li",[t._v("五层网络协议\n"),a("ul",[a("li",[t._v("应用层  - HTTP HTTPS")]),t._v(" "),a("li",[t._v("运输层 - TCP UDP")]),t._v(" "),a("li",[t._v("网络层 - IPv4 IPv6")]),t._v(" "),a("li",[t._v("数据链路层 - mac")]),t._v(" "),a("li",[t._v("物理层 - 光纤")])])])]),t._v(" "),a("h4",{attrs:{id:"练习-石头剪刀布-online版"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#练习-石头剪刀布-online版"}},[t._v("#")]),t._v(" 练习——石头剪刀布-online版")]),t._v(" "),a("h3",{attrs:{id:"_21-http-用express重构石头剪刀布"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_21-http-用express重构石头剪刀布"}},[t._v("#")]),t._v(" 21|HTTP：用express重构石头剪刀布")]),t._v(" "),a("h4",{attrs:{id:"要了解一个框架-最好的方法是"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#要了解一个框架-最好的方法是"}},[t._v("#")]),t._v(" 要了解一个框架，最好的方法是")]),t._v(" "),a("ul",[a("li",[t._v("了解他的关键功能")]),t._v(" "),a("li",[t._v("推导出他要解决的问题是什么")])]),t._v(" "),a("h4",{attrs:{id:"features"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#features"}},[t._v("#")]),t._v(" Features")]),t._v(" "),a("ul",[a("li",[t._v("Robust routing")]),t._v(" "),a("li",[t._v("Focus on high performance")]),t._v(" "),a("li",[t._v("Super-high test coverage")]),t._v(" "),a("li",[t._v("HTTP helpers (redirection, catching, etc)")]),t._v(" "),a("li",[t._v("View system supporting 14+ template engines")]),t._v(" "),a("li",[t._v("Content negotiation")]),t._v(" "),a("li",[t._v("Executable for generating applications quickly")])]),t._v(" "),a("h4",{attrs:{id:"核心功能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#核心功能"}},[t._v("#")]),t._v(" 核心功能")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("路由")])]),t._v(" "),a("li",[a("p",[t._v("request/response 简化")]),t._v(" "),a("ul",[a("li",[t._v("request： pathname, query, etc")]),t._v(" "),a("li",[t._v("response： send() , json(), jsonp() , etc\n"),a("ul",[a("li",[t._v("response.status(200)")]),t._v(" "),a("li",[t._v("response.send('hello world')")])])])])]),t._v(" "),a("li",[a("p",[t._v("中间件 - 洋葱模型")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("缺陷1 ：对异步的支持不太好，催生了下一代的koa")])]),t._v(" "),a("li",[a("p",[t._v("缺陷2 ： 通过res传递自定义变量，怪怪的")])]),t._v(" "),a("li",[a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用方式")]),t._v("\napp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里接受很多个function")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/game'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("req"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n     console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("req"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])])])]),t._v(" "),a("h3",{attrs:{id:"_22-http-用koa重构石头剪刀布游戏"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_22-http-用koa重构石头剪刀布游戏"}},[t._v("#")]),t._v(" 22|HTTP:用koa重构石头剪刀布游戏")]),t._v(" "),a("h4",{attrs:{id:"koa核心功能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#koa核心功能"}},[t._v("#")]),t._v(" koa核心功能")]),t._v(" "),a("ul",[a("li",[t._v("Midlleware\n"),a("ul",[a("li",[t._v("使用 async function 实现的中间件")]),t._v(" "),a("li",[t._v("有”暂停执行“能力")]),t._v(" "),a("li",[t._v("在异步的情况下也符合洋葱模型")])])]),t._v(" "),a("li",[t._v("Context - ctx.status,  ctx.req  或者在上面挂一些自定义的变量，比express中将一些自定义的变量挂在res上更符合语义\n"),a("ul",[a("li",[t._v("ctx.status = 200")]),t._v(" "),a("li",[t._v("ctx.body = 'hello world'")])])]),t._v(" "),a("li",[t._v("极简设计 - 路由需要中间件引入 - 使用koa-mount")])]),t._v(" "),a("h4",{attrs:{id:"小问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小问题"}},[t._v("#")]),t._v(" 小问题")]),t._v(" "),a("ul",[a("li",[a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("app"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("use")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mount")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\napp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("use")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mount")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/game'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这种顺序的写法，会导致请求 http://localhost:3000/game 总是会被上面那个拦截")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 必须要把‘/’ 这个放到下面才行")]),t._v("\n")])])])])]),t._v(" "),a("h3",{attrs:{id:"_23-rpc调用-什么是rpc调用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_23-rpc调用-什么是rpc调用"}},[t._v("#")]),t._v(" 23|RPC调用：什么是RPC调用？")]),t._v(" "),a("h4",{attrs:{id:"rpc调用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rpc调用"}},[t._v("#")]),t._v(" RPC调用")]),t._v(" "),a("ul",[a("li",[t._v("Remote Procedure Call 远程过程调用")])]),t._v(" "),a("h4",{attrs:{id:"与ajax的异同"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#与ajax的异同"}},[t._v("#")]),t._v(" 与Ajax的异同")]),t._v(" "),a("ul",[a("li",[t._v("相同点\n"),a("ul",[a("li",[t._v("都是两个计算机间的网络通信")]),t._v(" "),a("li",[t._v("需要双方约定一个数据格式")])])]),t._v(" "),a("li",[t._v("不同点\n"),a("ul",[a("li",[t._v("不一定使用DNS作为寻址服务")]),t._v(" "),a("li",[t._v("应用层协议一般不使用HTTP\n"),a("ul",[a("li",[t._v("二进制协议 - 更小的数据包体积")]),t._v(" "),a("li",[t._v("二进制协议 - 更快的编解码速率")])])]),t._v(" "),a("li",[t._v("基于TCP或UDP协议")])])])]),t._v(" "),a("h4",{attrs:{id:"tcp通信方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcp通信方式"}},[t._v("#")]),t._v(" TCP通信方式")]),t._v(" "),a("ul",[a("li",[t._v("单工通信：单向独木桥")]),t._v(" "),a("li",[t._v("半双工通信：双向独木桥（也叫轮番单工）")]),t._v(" "),a("li",[t._v("全双工通信：双向车道")])]),t._v(" "),a("h3",{attrs:{id:"_24-rpc调用-node-buffer编解码二进制数据包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_24-rpc调用-node-buffer编解码二进制数据包"}},[t._v("#")]),t._v(" 24|RPC调用：node  Buffer编解码二进制数据包")]),t._v(" "),a("ul",[a("li",[t._v("Buffer.from()")]),t._v(" "),a("li",[t._v("Buffer.alloc() : 创建指定长度的二进制")]),t._v(" "),a("li",[t._v("Buffer.writeInt8()")]),t._v(" "),a("li",[t._v("手动将"),a("code",[t._v("{name:'ss', age:12}")]),t._v("的对象转为二进制协议所需要的二进制数据，肯定是很麻烦，有没有类似"),a("code",[t._v("JSON.stringify()")]),t._v("的函数，一键生成呢\n"),a("ul",[a("li",[t._v("protocol buffer - google提供的 - https://developers.google.com/protocol-buffers/docs/proto")]),t._v(" "),a("li",[t._v("npm - protocol buffers - https://www.npmjs.com/package/protocol-buffers")])])])]),t._v(" "),a("h3",{attrs:{id:"_25-rpc调用-node-js-net建立多路复用的rpc通道"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_25-rpc调用-node-js-net建立多路复用的rpc通道"}},[t._v("#")]),t._v(" 25|RPC调用：Node.js net建立多路复用的RPC通道")]),t._v(" "),a("p",[t._v("这一节不是很明白？？？？")]),t._v(" "),a("h3",{attrs:{id:"_26-项目启动-整体需求分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_26-项目启动-整体需求分析"}},[t._v("#")]),t._v(" 26|项目启动：整体需求分析")]),t._v(" "),a("ul",[a("li",[t._v("三个页面\n"),a("ul",[a("li",[t._v("首页")]),t._v(" "),a("li",[t._v("详情页")]),t._v(" "),a("li",[t._v("课程播放页")]),t._v(" "),a("li",[t._v("app下载页")])])]),t._v(" "),a("li",[t._v("设计网站的架构")])]),t._v(" "),a("h3",{attrs:{id:"_28-课程详情-详情需求解构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_28-课程详情-详情需求解构"}},[t._v("#")]),t._v(" 28|课程详情：详情需求解构")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("解构")]),t._v(" "),a("ul",[a("li",[t._v("使用RPC通信从后台服务器获取数据")])])]),t._v(" "),a("li",[a("p",[t._v("模板引擎")]),t._v(" "),a("ul",[a("li",[t._v("include 子模板")]),t._v(" "),a("li",[t._v("xss过滤 模板helper函数")])])])]),t._v(" "),a("h3",{attrs:{id:"_29-课程详情-将es6模板字符串转换为模板引擎"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_29-课程详情-将es6模板字符串转换为模板引擎"}},[t._v("#")]),t._v(" 29|课程详情：将ES6模板字符串转换为模板引擎")]),t._v(" "),a("ul",[a("li",[t._v("Node.js中常用模板引擎是ejs")]),t._v(" "),a("li",[t._v("通过vm模块编译JS形成的函数- "),a("code",[t._v("vm.runInNewContext（）")]),t._v(" "),a("ul",[a("li",[t._v("xss过滤，模板helper函数")]),t._v(" "),a("li",[t._v("include子模板")])])]),t._v(" "),a("li",[t._v("TODO：\n"),a("ul",[a("li",[t._v("了解下其他的模板解析：https://www.jianshu.com/p/3337f8a13917")]),t._v(" "),a("li",[t._v("状态机 + AST +  正则匹配 ：https://github.com/zhangxiang958/zhangxiang958.github.io/issues/39")]),t._v(" "),a("li",[t._v("demo: https://segmentfault.com/a/1190000005705169")]),t._v(" "),a("li",[t._v("https://juejin.im/post/5a04a08ff265da430e4e9d42")])])])]),t._v(" "),a("h3",{attrs:{id:"_30-课程详情页-详情页需求实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_30-课程详情页-详情页需求实现"}},[t._v("#")]),t._v(" 30|课程详情页：详情页需求实现")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("RPC的封装")]),t._v(" "),a("ul",[a("li",[t._v("通过8位的header，解决粘包问题，全双工通信的实现\n"),a("ul",[a("li",[a("a",{attrs:{href:"https://www.nodejs.red/#/nodejs/net?id=tcp-%e7%b2%98%e5%8c%85%e9%97%ae%e9%a2%98",target:"_blank",rel:"noopener noreferrer"}},[t._v("粘包问题解释"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("如何跟后端协商的实现全双工通信？？")])])])])]),t._v(" "),a("li",[a("p",[t._v("node包："),a("code",[t._v("easy_sock")]),t._v(" - 快速开发基于tcp连接的二进制网络协议接口的nodejs模块")])]),t._v(" "),a("li",[a("p",[t._v("node包："),a("code",[t._v("proto-buffers")]),t._v("使用基于文件的协议")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("Buffer.readUInt32LE与")]),t._v(" "),a("a",{attrs:{href:"https://vimsky.com/examples/usage/node-js-buffer-readuint32le-method.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("readUInt32BE"),a("OutboundLink")],1)])]),t._v(" "),a("li",[a("p",[t._v("TODO： 这里有个BUG，只能请求一次，然后服务端报错 -")])]),t._v(" "),a("li",[a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code")])])])]),t._v(" "),a("p",[t._v("internal/buffer.js:51\nthrow new ERR_BUFFER_OUT_OF_BOUNDS();\n^\nRangeError [ERR_BUFFER_OUT_OF_BOUNDS]: Attempt to write outside buffer bounds")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('\n### 31|课程播放页：需求解构\n\n- API服务 - RESTful\n- 简单易懂\n- 可以快速搭建\n- 在数据的聚合方面有很大劣势\n- API服务 - GraphQL\n- [什么是 GraphQL？](https://www.zhihu.com/question/264629587?sort=created)\n- 专注数据聚合，前端要什么就返回什么\n\n### 32|课程播放页：实现\n\n- GraphQL\n- Facebook开发的实现API服务的库\n- 让前端有“自定义查询”数据的能力\n- Koa-graphql 中间件\n- TODO:自己使用这个写的例子 启动服务之后，在地址栏输入 `http://localhost:4000/?query={comment{id}}` 总是报错`{"errors":[{"message":"Expected {} to be a GraphQL schema."}]}` 不知道是为什么\n- **思考题**\n- 自己工作中，有哪些是可以通过GraphQL来处理的场景\n- 后端为啥是一个微服务，占用一个端口吗？\n\n### 34|课程列表页：需求解构\n\n- 后端需要渲染列表\n- 首屏加速\n- SEO\n- 前端也需要渲染列表\n- 无刷新过滤、排序\n- 前后端使用一套模板渲染，开发效率高\n- 前后端同构\n- 同一个模板/组件，可在浏览器渲染，也可在Node.js渲染\n\n### 35|课程列表页： 服务端渲染\n\n- 前后端同构\n- ReactDOMServer.renderToString()\n- VueServerRenderer.renderToString()\n- 使用React实现SSR（服务端渲染）\n- 需要安装包\n - @babel/preset-react \n - @babel/register\n - react\n - react-dom\n\n- 同构的关键\n\n- 注意职责分离\n - 处理数据\n - 环境\n\n- 同构的理解\n\n- ###### [JS核心理论之《SPA、CSR、SSR、Prerender原理浅析》](https://zhuanlan.zhihu.com/p/138356519)\n\n- 服务端渲染的技术方案\n\n- 纯后台技术实现\n\n - 利用后台语言模板引擎进行服务器端渲染方案落地。对于前端来说，可以利用node作为中间件，然后利用node的ejs模板引擎负责数据填充，最后通过node路由响应机制输出html字符串给客户端浏览器进行渲染；\n\n- 构建同构应用\n\n - 同构应用就是可以同时运行在客户端和服务器端的Web应用；这种一般采用webpack构建工具和开源工具进行实现；以下会以Vue来介绍同构应用；这种实现方式相对于上面的方案更复杂，开发难度大；但是可以享受到Vue框架带来的便利（响应式数据，路由无感切换等便利）。前提需要“客户端激活”\n\n - > **客户端激活：官方术语，可以理解为服务器端渲染成html字符串给浏览器之后，需要引入客户端的bundleClient文件，这个环节就交给客户端处理了；**\n\n- ###### 【小项目】[Vue SSR技术方案落地实现—构建同构应用](https://juejin.im/post/5cf79cee6fb9a07eeb139725)\n\n- 实现一个小DEMO\n- babel的设置学习\n - 详见 - /项目架构/工程能力.md\n\n### 36|课程列表页：需求实现\n\n\n\n')])])])])}),[],!1,null,null,null);s.default=e.exports}}]);